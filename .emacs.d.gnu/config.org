#+TITLE: GNU Emacs Config
#+AUTHOR: Charged
Personal configuration file written by Charged for GNU Emacs.

* Table of Contents :toc:
- [[#about-this-config][About this config]]
  - [[#warning][WARNING]]
- [[#melpa][MELPA]]
- [[#use-package][Use Package]]
- [[#evil-mode][Evil Mode]]
- [[#fonts][Fonts]]
- [[#zooming-in-and-out][Zooming in and out]]
- [[#gui-settings][GUI SETTINGS]]
  - [[#disable-menu][DISABLE MENU]]
  - [[#display-line-numbers][Display line numbers]]
  - [[#doom-modeline][Doom Modeline]]
- [[#which-key][Which Key]]
- [[#org-mode][Org Mode]]
  - [[#auto-toc][Auto TOC]]
  - [[#org-fonts][Org Fonts]]
  - [[#org-superstar][Org Superstar]]
- [[#org-auto-tangle][Org auto tangle]]
- [[#doom-themes][Doom themes]]
- [[#more-keybinds][More keybinds]]
- [[#all-the-icons][All the icons]]
- [[#dired][Dired]]
- [[#ivy][IVY]]
  - [[#ivy-posframe][Ivy Posframe]]
- [[#language-support][Language Support]]
- [[#dashboard][Dashboard]]
  - [[#dashboard-on-emacs-client][Dashboard on Emacs client]]
- [[#emojis][Emojis]]
- [[#erc][ERC]]
- [[#neotree][Neotree]]
- [[#vterm][Vterm]]
- [[#snippets][Snippets]]
- [[#startup-performance][Startup Performance]]
  - [[#garbage-collection][Garbage collection]]
  - [[#native-compile][Native Compile]]
- [[#runtime-performance][Runtime performance]]
- [[#writeroom-mode][Writeroom Mode]]
- [[#blink-cursor-mode][Blink cursor mode]]
- [[#beacon-mode][Beacon mode]]

* About this config
GNU Emacs is a powerful, extensible text editor. It's pretty much its own operating system! I mean, what can't Emacs do? This config of mine is trying to be as much like Doom Emacs as possible, but to have Emacs work as GNU Emacs.

#+CAPTION: GNU Emacs Scrot
#+ATTR_HTML: :alt GNU Emacs Scrot :title GNU Emacs Scrot :align left
[[https://gitlab.com/charged1/dotfiles/-/raw/master/.screenshots/emacs/gnu-emacs.png]]

** WARNING
This config is for GNU Emacs, not Doom Emacs. If you would like to visit that, check [[https://gitlab.com/charged1/dotfiles/-/tree/master/.doom.d][this]] out.

* MELPA
MELPA is an external repo of Emacs packages. It contains lots of the popular ones, so we must install it!
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

* Use Package
#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+end_src

* Evil Mode
Allows us to use Vim-like keybindings on Emacs.
#+begin_src elisp
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)
#+end_src

* Fonts
#+begin_src elisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
;; (setq-default line-spacing 0.12)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Source Code Pro-11"))
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
#+end_src

* Zooming in and out
#+begin_src elisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
Why doesn't GNU Emacs have this by default? I have no idea.

* GUI SETTINGS
** DISABLE MENU
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display line numbers
#+begin_src elisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Doom Modeline
#+begin_src elisp
(use-package doom-modeline)
(doom-modeline-mode 1)
#+end_src

* Which Key
Which one?
#+begin_src elisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " â†’ " ))
(which-key-mode)
#+end_src

* Org Mode
** Auto TOC
#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Fonts
#+begin_src elisp
(add-hook 'org-mode-hook #'mixed-pitch-mode)
#+end_src

** Org Superstar
Nice bullets you got there!
#+begin_src elisp
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

* Org auto tangle
Tangles config files on save.
#+begin_src elisp
#+end_src

* Doom themes
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
       doom-themes-enable-italic t)) ; if nil, italics is universally disabled
(load-theme 'doom-one)
#+end_src

* More keybinds
#+begin_src elisp
  (use-package general
  :config
  (general-evil-setup t))
  (nvmap :keymaps 'override :prefix "SPC"
	 "SPC"   '(counsel-M-x :which-key "M-x")
	 "c c"   '(compile :which-key "Compile")
	 "c C"   '(recompile :which-key "Recompile")
	 "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
	 "l t"   '(load-theme :which-key "Load theme")
	 "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
	 "b k"   '(kill-current-buffer :which-key "Kill the current buffer.")
	 "b i"   '(ibuffer :which-key "Open iBuffer"))
  (nvmap :keymaps 'override :prefix "SPC"
	 "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
	 "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
	 "m ."   '(counsel-org-goto :which-key "Counsel org goto")
	 "m e"   '(org-export-dispatch :which-key "Org export dispatch")
	 "m f"   '(org-footnote-new :which-key "Org footnote new")
	 "m h"   '(org-toggle-heading :which-key "Org toggle heading")
	 "m i"   '(org-toggle-item :which-key "Org toggle item")
	 "m n"   '(org-store-link :which-key "Org store link")
	 "m o"   '(org-set-property :which-key "Org set property")
	 "m t"   '(org-todo :which-key "Org todo")
	 "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
	 "m T"   '(org-todo-list :which-key "Org todo list")
	 "o a"   '(org-agenda :which-key "Org agenda")
	 )
#+end_src

* All the icons
Emacs is a GUI program, let's make the most out of it.
#+begin_src elisp
(use-package all-the-icons)
#+end_src

* Dired
The built-in file manager for Emacs!
#+begin_src elisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "."   '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

* IVY
#+begin_src elisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  (use-package ivy
    :defer 0.1
    :diminish
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
				 'ivy-rich-switch-buffer-transformer)
    (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)))

(setq ivy-initial-inputs-alist nil)
(use-package smex)
(smex-initialize)
#+end_src

** Ivy Posframe
#+begin_src elisp
(use-package ivy-posframe
  :init
  (setq ivy-posframe-display-functions-alist
    '((swiper                     . ivy-posframe-display-at-point)
      (complete-symbol            . ivy-posframe-display-at-point)
      (counsel-M-x                . ivy-display-function-fallback)
      (counsel-esh-history        . ivy-posframe-display-at-window-center)
      (counsel-describe-function  . ivy-display-function-fallback)
      (counsel-describe-variable  . ivy-display-function-fallback)
      (counsel-find-file          . ivy-display-function-fallback)
      (counsel-recentf            . ivy-display-function-fallback)
      (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
      (dmenu                      . ivy-posframe-display-at-frame-top-center)
      (nil                        . ivy-posframe-display))
    ivy-posframe-height-alist
    '((swiper . 20)
      (dmenu . 20)
      (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

* Language Support
#+begin_src elisp
(use-package python-mode)
(use-package lua-mode)
(use-package markdown-mode)
#+end_src

* Dashboard
You gotta have it look good!
#+begin_src elisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

** Dashboard on Emacs client
#+begin_src elisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Emojis
Who doesn't love emojis?
#+begin_src elisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* ERC
IRC, in Emacs!
#+begin_src elisp
(setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))
      erc-server "irc.libera.chat"
      erc-nick "Charged[m]"
      erc-user-full-name "Charged"
      erc-track-shorten-start 24
      erc-autojoin-channels-alist '(("irc.libera.chat" "#archlinux" "#linux" "#emacs" "#awesome" "freetech studios"))
      erc-kill-buffer-on-part t
      erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      ;; erc-auto-query 'bury
      )
#+end_src

* Neotree
VSCode-like file viewer on the left.
#+begin_src elisp
(defcustom neo-window-width 25
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)

(use-package neotree
  :config
  (setq neo-smart-open t
        neo-window-width 30
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        ;;neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

;; show hidden files
(setq-default neo-show-hidden-files t)

(nvmap :prefix "SPC"
       "t n"   '(neotree-toggle :which-key "Toggle neotree file viewer")
       "d n"   '(neotree-dir :which-key "Open directory in neotree"))
#+end_src

* Vterm
Terminal Emulator, in Emacs!
#+begin_src elisp
(use-package vterm)
#+end_src

* Snippets
Small little templates of useful stuff.
#+begin_src elisp
(use-package yasnippet)
#+end_src

* Startup Performance
Make Emacs load faster!

** Garbage collection
Reducing the frequency
#+begin_src elisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compile
#+begin_src elisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* Runtime performance
#+begin_src elisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Writeroom Mode
#+begin_src elisp
  ;; (use-package writeroom-mode)
#+end_src

* Blink cursor mode
Sometime, I don't like it when my cursor blinks, so i turn it off.
#+begin_src elisp
(blink-cursor-mode 0)
#+end_src

* Beacon mode
Make your cursor glow after scrolling!
#+begin_src elisp
(use-package beacon)
(beacon-mode 1)
#+end_src
