#+TITLE: GNU Emacs Config
#+AUTHOR: Charged
Personal configuration file written by Charged for GNU Emacs.

* About this config
GNU Emacs is a powerful, extensible text editor. It's pretty much its own operating system! I mean, what can't Emacs do? This config of mine is trying to be as much like Doom Emacs as possible, but to have Emacs work as GNU Emacs.

#+CAPTION: GNU Emacs Scrot
#+ATTR_HTML: :alt GNU Emacs Scrot :title GNU Emacs Scrot :align left
[[https://gitlab.com/charged1/dotfiles/-/raw/master/.screenshots/emacs/gnu-emacs.png]]

** WARNING
This config is for GNU Emacs, not Doom Emacs. If you would like to visit that, check [[https://gitlab.com/charged1/dotfiles/-/tree/master/.doom.d][this]] out.

* Little things
Some small things that just make our lives better.

** Beacon Mode
Nice flash when scrolling, so you don't lose your cursor.
#+begin_src elisp
(use-package beacon)
(beacon-mode 1)
#+end_src

** Good scroll
Don't you just love smooth scrolling? I know you do, admit it.
#+begin_src elisp
(use-package good-scroll)
(good-scroll-mode 1)
#+end_src

** Line numbers
Useful for debugging code.
#+begin_src elisp
;; Line numbers
(column-number-mode)
(global-display-line-numbers-mode t)
#+end_src

* GUI
Just some nice tweaks to improve the GUI experience.

** Minimal GUI
We can remove some toolbars to make Emacs cleaner.
#+begin_src elisp
;; Remove startup message
(setq inhibit-startup-message t)

;; Remove menus
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

(menu-bar-mode -1)

;; Blinking cursor
(blink-cursor-mode 0)
#+end_src

** Blinking cursor
I'm not a big fan of this, so I have it off.
#+begin_src elisp
;; Blinking cursor
(blink-cursor-mode 0)
#+end_src

** Fonts
I have some basic fonts set up here.
#+begin_src elisp
;; Font
(set-face-attribute 'default nil :font "JetBrains Mono" :height 180)
(set-face-attribute 'variable-pitch nil :font "Ubuntu Bold" :height 180 :weight 'regular)
#+end_src

* MELPA, use-package
use-package will be used to install packages. MELPA is a repo we need to grab some of these packages.
#+begin_src elisp
;; Initialize package sources
(require 'package)

;; MELPA
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; use-package
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Ivy
One of my favourite packages, it gives me a little preview and help during menus.
#+begin_src elisp
;; Ivy
(use-package ivy
  :diminish
  :config
  (ivy-mode 1))
#+end_src

* Modeline
I am using the doom-modeline and the all-the-icons packages to make my modeline look better.
#+begin_src elisp
;; Icon pack
(use-package all-the-icons)

;; Nice modeline
(use-package doom-modeline)
(doom-modeline-mode 1)
;;  :custom ((doom-modeline-height 30)))
#+end_src

* Rainbow delimiters
A nice tweak for Elisp files which helps us know the order of the brackets.
#+begin_src elisp
;; Show bracket colours
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Which key
Yeah, which one?
#+begin_src elisp
;; Which-key
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src

* Theme
I am using Doom Emacs' default theme: Doom One.
#+begin_src elisp
;; Theme package
(use-package doom-themes)

;; Load theme, "t" to stop asking
(load-theme 'doom-one t)
#+end_src

* Counsel, Evil
Vim-like keybinds to save your pinky.
#+begin_src elisp
;; Counsel
(use-package counsel)
(counsel-mode 1)

;; Vim-like keybinds
(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor)

;; Zoom in, out.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Keybindings
Again, saving my pinky.
#+begin_src elisp
;; Keybinds
(use-package general
  :config
  (general-evil-setup t))
(nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(counsel-M-x :which-key "M-x")
       "c c"   '(compile :which-key "Compile")
       "c C"   '(recompile :which-key "Recompile")
       "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
       "h t"   '(load-theme :which-key "Load theme")
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
       "b k"   '(kill-current-buffer :which-key "Kill the current buffer.")
       "b i"   '(ibuffer :which-key "Open iBuffer")
       "."     '(find-file :which-key "Find file"))
(nvmap :keymaps 'override :prefix "SPC"
       "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
       "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
       "m ."   '(counsel-org-goto :which-key "Counsel org goto")
       "m e"   '(org-export-dispatch :which-key "Org export dispatch")
       "m f"   '(org-footnote-new :which-key "Org footnote new")
       "m h"   '(org-toggle-heading :which-key "Org toggle heading")
       "m i"   '(org-toggle-item :which-key "Org toggle item")
       "m n"   '(org-store-link :which-key "Org store link")
       "m o"   '(org-set-property :which-key "Org set property")
       "m t"   '(org-todo :which-key "Org todo")
       "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "m T"   '(org-todo-list :which-key "Org todo list")
       "o a"   '(org-agenda :which-key "Org agenda"))
#+end_src

* Org mode
I'm going to split this into many different parts, but it is one for now.
#+begin_src elisp
;; Org bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Bigger next on subheadings
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.25))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.2))))
)

;; Indent on subheadings
(org-indent-mode 1)

;; Stop indenting when new line is made in org src blocks
(setq org-src-preserve-indentation t)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
(set-face-attribute 'line-number nil :inherit 'fixed-pitch)
(set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
#+end_src

* Electric pair
Simple task: Close brackets when opened.
#+begin_src elisp
;; Close stuff
(electric-pair-mode 1)
#+end_src
